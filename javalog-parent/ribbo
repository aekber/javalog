public class FileConverter {

	public static void main(String[] args) throws Exception {

		IConverter xmlConverter = new XMLFileConverter();
		xmlConverter.convert();

		IConverter jsonFileConverter = new JSONFileConverter();
		jsonFileConverter.convert();
	}
}


public interface IConverter {

	public void convert() throws Exception;
}


public abstract class AbstractFileConverter implements IConverter {

	public List<Hotel> getCSVFileAsList(){
		List<Hotel> hotelList = CSVLoader.loadObjectList(Hotel.class, "hotels.csv");
		Collections.sort(hotelList);
		
		return hotelList;
	}
	
	abstract public String getDescription();

}



public class XMLFileConverter extends AbstractFileConverter {

	@Override
	public void convert() throws Exception {        
        
        //TODO:Hotel in her bir property sine null kontrolü ekle
        
        
        JAXBContext jaxbContext = JAXBContext.newInstance(HotelList.class);
		Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
		jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
		HotelList list = new HotelList();
		list.addAll(getCSVFileAsList());
		jaxbMarshaller.marshal(list, new BufferedWriter(new OutputStreamWriter(new FileOutputStream("hotels.xml"), "UTF-8")));
	}

	@Override
	public String getDescription() {
		return "xml converter";
	}
}



public class JSONFileConverter extends AbstractFileConverter {

	@Override
	public void convert() throws Exception {        
        
        //TODO:Hotel in her bir property sine null kontrolü ekle

        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        mapper.writeValue(new BufferedWriter(new OutputStreamWriter(new FileOutputStream("hotels.json"), "UTF-8")), getCSVFileAsList());
	}

	@Override
	public String getDescription() {
		return "json converter";
	}
}


public class CSVLoader
{     
    private static Logger LOG = LoggerFactory.getLogger(CSVLoader.class);

    public static <T> List<T> loadObjectList(Class<T> type, String fileName) 
    {
        try {
            CsvSchema bootstrapSchema = CsvSchema.emptySchema().withHeader();
            CsvMapper mapper = new CsvMapper();
            
            InputStream inputStream = ClassLoader.getSystemResourceAsStream(fileName);
            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, Charset.forName("UTF-8")));            
            MappingIterator<T> readValues = mapper.readerFor(type).with(bootstrapSchema).readValues(br);
            return readValues.readAll();
        } catch (Exception e) {
            LOG.error("Error occurred while loading object list from file " + fileName, e);
            return Collections.emptyList();
        }
    }
}
